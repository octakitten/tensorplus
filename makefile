SHELL = /bin/bash
CC = gcc11
CXX = nvcc
DEBUGFLAGS =
FLAGS = -Iinclude -I/opt/cuda/include -L/opt/cuda/lib64
CFLAGS = -std=c++20
CUDAFLAGS = -arch sm_61 -Xcompiler '-fPIC' --std=c++20
RELEASEFLAGS =
LDFLAGS = -shared
TARGETFLAGS = --output-directory $(TARGETDIR)
OBJTARFLAGS = --output-directory $(BUILDDIR)$(OBJDIR)
GCCFLAGS =

SOURCES = tensorplus.c
CUSOURCES = tensor.cu
HEADERS = defines.h includes.h
OBJECTS = tensorplus.o
CUOBJS = tensor.o
TARGET = tensorplus.so
TARGETMAC = tensorplus.dylib
TARGETWIN = tensorplus.dll

RM= rm -f
.PHONY: clean
TARGETDIR = src/tensorplus/
SOURCEDIR = lib/
BUILDDIR = build/
OBJDIR = objects/
MAKEDIRS = mkdir -p 

all: $(TARGETDIR)$(TARGET) $(TARGETDIR)$(TARGETMAC) $(TARGETDIR)$(TARGETWIN)

$(TARGETDIR)$(TARGETMAC): $(BUILDDIR)$(OBJDIR)$(OBJECTS) $(BUILDDIR)$(OBJDIR)$(CUOBJS)
	$(CXX) $(FLAGS) $(CFLAGS) $(DEBUGFLAGS) $(LDFLAGS) $(GCCFLAGS) $(CUDAFLAGS) -o $(TARGETDIR)$(TARGETMAC) $(BUILDDIR)$(OBJDIR)$(OBJECTS) $(BUILDDIR)$(OBJDIR)$(CUOBJS)

$(TARGETDIR)$(TARGETWIN): $(BUILDDIR)$(OBJDIR)$(OBJECTS) $(BUILDDIR)$(OBJDIR)$(CUOBJS)
	$(CXX) $(FLAGS) $(CFLAGS) $(DEBUGFLAGS) $(LDFLAGS) $(GCCFLAGS) $(CUDAFLAGS) -o $(TARGETDIR)$(TARGETWIN) $(BUILDDIR)$(OBJDIR)$(OBJECTS) $(BUILDDIR)$(OBJDIR)$(CUOBJS)

$(TARGETDIR)$(TARGET): $(BUILDDIR)$(OBJDIR)$(OBJECTS) $(BUILDDIR)$(OBJDIR)$(CUOBJS)
	$(CXX) $(FLAGS) $(CFLAGS) $(DEBUGFLAGS) $(LDFLAGS) $(GCCFLAGS) $(CUDAFLAGS) -o $(TARGETDIR)$(TARGET) $(BUILDDIR)$(OBJDIR)$(OBJECTS) $(BUILDDIR)$(OBJDIR)$(CUOBJS)

$(BUILDDIR)$(OBJDIR)$(CUOBJS): $(SOURCEDIR)$(CUSOURCES)
	$(CXX) $(FLAGS) $(CFLAGS) $(DEBUGFLAGS) $(LDFLAGS) $(GCCFLAGS) $(OBJTARFLAGS) $(CUDAFLAGS) -c $(SOURCEDIR)$(CUSOURCES)

$(BUILDDIR)$(OBJDIR)$(OBJECTS): $(SOURCEDIR)$(SOURCES)
	$(CXX) $(FLAGS) $(CFLAGS) $(DEBUGFLAGS) $(LDFLAGS) $(GCCFLAGS) $(OBJTARFLAGS) $(CUDAFLAGS) -c $(SOURCEDIR)$(SOURCES)

clean:
	$(RM) $(BUILDDIR)$(OBJDIR)$(OBJECTS) $(BUILDDIR)$(OBJDIR)$(CUOBJS) $(TARGETDIR)$(TARGET) $(TARGETDIR)$(TARGETMAC) $(TARGETDIR)$(TARGETWIN)

install:

